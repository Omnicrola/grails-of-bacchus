{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/GrailThumb.js","pages/GrailsPage.js","actions/GrailActions.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react","React","AboutPage","GrailThumb","_ref","data","className","name","src","concat","id","alt","GrailsPage","grails","_this2","axios","get","then","response","setState","map","grail","GrailThumb_GrailThumb","NavBar","class","react_router_dom","to","App","react_default","a","createElement","NavBar_NavBar","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAEaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,EADvB,OAAAC,OAAAO,EAAA,EAAAP,CAAAJ,EAAAC,GAAAG,OAAAQ,EAAA,EAAAR,CAAAJ,EAAA,EAAAa,IAAA,SAAAC,MAAA,WAOQ,OACIC,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,gCACAA,EAAA,6BAVhBf,EAAA,CAA8BgB,aCAjBC,EAAb,SAAAhB,GACI,SAAAgB,EAAYf,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACfd,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,EADvB,OAAAC,OAAAO,EAAA,EAAAP,CAAAa,EAAAhB,GAAAG,OAAAQ,EAAA,EAAAR,CAAAa,EAAA,EAAAJ,IAAA,SAAAC,MAAA,WAOQ,OACIC,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,iCACAA,EAAA,0RAGAA,EAAA,+LAbhBE,EAAA,CAA+BD,8BCAxB,IAAME,EAAa,SAAAC,GAAY,IAAVC,EAAUD,EAAVC,KACxB,OAAQL,EAAA,qBAAKM,UAAU,uBACnBN,EAAA,wBAAKK,EAAKE,MACVP,EAAA,qBAAKQ,IAAG,gBAAAC,OAAkBJ,EAAKK,GAAvB,kBAA2CC,IAAI,gBCDlDC,EAAb,SAAA1B,GACI,SAAA0B,EAAYzB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACfxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMJ,KACDQ,MAAQ,CACTkB,OAAQ,IAHGzB,EADvB,OAAAC,OAAAO,EAAA,EAAAP,CAAAuB,EAAA1B,GAAAG,OAAAQ,EAAA,EAAAR,CAAAuB,EAAA,EAAAd,IAAA,oBAAAC,MAAA,WAQwB,IAAAe,EAAAvB,KCTbwB,IAAMC,IAAI,0BACZC,KAAK,SAAAC,GACF,OAAOA,EAASb,ODSfY,KAAK,SAAAZ,GACFS,EAAKK,SAAS,CAACN,OAAQR,QAXvC,CAAAP,IAAA,SAAAC,MAAA,WAgBQ,OACIC,EAAA,cAACA,EAAA,SAAD,KACIA,EAAA,kCACCT,KAAKI,MAAMkB,OAAOO,IAAI,SAAAC,GACnB,OACIrB,EAAA,cAACsB,EAAD,CAAYjB,KAAMgB,WArB1CT,EAAA,CAAgCX,aEAnBsB,SAAb,SAAArC,GACI,SAAAqC,EAAYpC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACfnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KACDQ,MAAQ,GAFEP,EADvB,OAAAC,OAAAO,EAAA,EAAAP,CAAAkC,EAAArC,GAAAG,OAAAQ,EAAA,EAAAR,CAAAkC,EAAA,EAAAzB,IAAA,SAAAC,MAAA,WAOQ,OACIC,EAAA,qBAAKM,UAAU,oBACXN,EAAA,oBAAIM,UAAU,UAAd,sBACAN,EAAA,qBAAKwB,MAAM,SACPxB,EAAA,cAACyB,EAAA,EAAD,CAAMnB,UAAU,OAAOoB,GAAG,KAA1B,QACA1B,EAAA,cAACyB,EAAA,EAAD,CAAMnB,UAAU,OAAOoB,GAAG,WAA1B,UACA1B,EAAA,cAACyB,EAAA,EAAD,CAAMnB,UAAU,OAAOoB,GAAG,UAA1B,eAbpBH,EAAA,CAA4BtB,cCmBb0B,MAff,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKxB,UAAU,OACXsB,EAAAC,EAAAC,cAACL,EAAA,EAAD,KACIG,EAAAC,EAAAC,cAACC,EAAD,MACAH,EAAAC,EAAAC,cAAA,OAAKxB,UAAU,kBACXsB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlD,IACjC2C,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWjC,IAChC0B,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWvB,QCJjCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.5305943c.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nexport class HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Home</h1>\r\n                <p></p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport class AboutPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>About</h1>\r\n                <p>The Grails of Dionysis are rare chalices of great power and debauchery. Their origins are shrouded in\r\n                    mystery but historians believe they originated somewhere in a garage in Ypsilanti during a\r\n                    inexplicable period of sobriety while in proximity to a lathe.</p>\r\n                <p>Each hand-crafted Grail is a unique one-of-a-kind creation, a wonderous fusion of craftsmanship,\r\n                    skill, obscene humor, and whatever is lying around the garage.</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport const GrailThumb = ({data}) => {\r\n    return (<div className=\"thumbnail-container\">\r\n        <h2>{data.name}</h2>\r\n        <img src={`images/grail-${data.id}/thumbnail.jpg`} alt=\"thumbnail\"/>\r\n    </div>);\r\n};","import * as React from \"react\";\r\nimport {getGrailData} from \"../actions/GrailActions\";\r\nimport {GrailThumb} from \"../components/GrailThumb\";\r\n\r\nexport class GrailsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grails: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        getGrailData()\r\n            .then(data => {\r\n                this.setState({grails: data});\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Grails</h1>\r\n                {this.state.grails.map(grail=>{\r\n                    return (\r\n                        <GrailThumb data={grail}/>\r\n                    );\r\n                })}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport function getGrailData() {\r\n    return axios.get('data/gallery.data.json')\r\n        .then(response => {\r\n            return response.data;\r\n        });\r\n}","import * as React from \"react\";\r\nimport {BrowserRouter as Router, Link} from \"react-router-dom\";\r\nimport '../styles/NavBar.scss';\r\n\r\nexport class NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar-container\">\r\n                <h1 className=\"header\">Grails of Dionysus</h1>\r\n                <div class=\"links\">\r\n                    <Link className=\"link\" to=\"/\">Home</Link>\r\n                    <Link className=\"link\" to=\"/grails\">Grails</Link>\r\n                    <Link className=\"link\" to=\"/about\">About</Link>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './styles/App.scss';\nimport {BrowserRouter as Router, Route, Link} from \"react-router-dom\";\nimport {HomePage} from \"./pages/HomePage\";\nimport {AboutPage} from \"./pages/AboutPage\";\nimport {GrailsPage} from \"./pages/GrailsPage\";\nimport {NavBar} from \"./components/NavBar\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Router>\n                <NavBar/>\n                <div className=\"page-container\">\n                    <Route path=\"/\" exact component={HomePage}/>\n                    <Route path=\"/about\" component={AboutPage}/>\n                    <Route path=\"/grails\" component={GrailsPage}/>\n                </div>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}