{"version":3,"sources":["pages/HomePage.js","pages/AboutPage.js","components/GrailThumb.js","components/GrailGallery.js","components/PropRoute.js","components/GrailSubmenu.js","components/SingleGrail.js","pages/GrailsPage.js","actions/GrailActions.js","components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","value","react","React","AboutPage","GrailThumb","_ref","data","className","react_router_dom","to","id","name","src","concat","alt","GrailGallery","grails","class","map","grail","GrailThumb_GrailThumb","PropRoute","component","rest","objectWithoutProperties","react_router","assign","render","routeProps","_len","arguments","length","Array","_key","finalProps","apply","renderMergedProps","GrailSubmenu","match","GalleryImage","image","SingleGrail","_ref2","params","find","g","GrailSubmenu_GrailSubmenu","images","SingleGrail_GalleryImage","description","GrailsPage","_this2","axios","get","then","response","setState","PropRoute_PropRoute","exact","path","NavBar","App","react_default","a","createElement","NavBar_NavBar","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dda63474.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nexport class HomePage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>Home</h1>\r\n                <p></p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport class AboutPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>About</h1>\r\n                <p>The Grails of Dionysis are rare chalices of great power and debauchery. Their origins are shrouded in\r\n                    mystery but historians believe they originated somewhere in a garage in Ypsilanti during a\r\n                    inexplicable period of sobriety while in proximity to a lathe.</p>\r\n                <p>Each hand-crafted Grail is a unique one-of-a-kind creation, a wonderous fusion of craftsmanship,\r\n                    skill, obscene humor, and whatever is lying around the garage.</p>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import * as React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport '../styles/GrailThumb.scss';\r\n\r\nexport const GrailThumb = ({data}) => {\r\n    return (<div className=\"thumbnail-container\">\r\n        <Link  className=\"link\" to={'/grails/' + data.id}>\r\n            <h2 className=\"grail-title\">{data.name}</h2>\r\n            <img src={`images/grail-${data.id}/thumbnail.jpg`} alt=\"thumbnail\"/>\r\n        </Link>\r\n    </div>);\r\n};","import * as React from \"react\";\r\nimport {GrailThumb} from \"./GrailThumb\";\r\nimport '../styles/GrailGallery.scss';\r\n\r\nexport const GrailGallery = ({grails}) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Grails</h1>\r\n            <div className=\"gallery\">\r\n                <button>&lt;</button>\r\n                <div class=\"window\">\r\n                    {grails.map(grail => {\r\n                        return (\r\n                            <GrailThumb key={grail.id} data={grail}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n                <button>&gt;</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};","import * as React from \"react\";\r\nimport {Route} from \"react-router-dom\";\r\n\r\nconst renderMergedProps = (component, ...rest) => {\r\n    const finalProps = Object.assign({}, ...rest);\r\n    return (\r\n        React.createElement(component, finalProps)\r\n    );\r\n}\r\n\r\nconst PropRoute = ({component, ...rest}) => {\r\n    return (\r\n        <Route {...rest} render={routeProps => {\r\n            return renderMergedProps(component, routeProps, rest);\r\n        }}/>\r\n    );\r\n}\r\nexport {PropRoute};","import * as React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport '../styles/GrailSubmenu.scss';\r\n\r\nexport const GrailSubmenu = ({grails, match}) => {\r\n    return (\r\n        <div className=\"grail-subnav\">\r\n            {grails.map(grail => <Link className=\"subnav-item\"\r\n                                       to={`/grails/${grail.id}`}>{grail.name}</Link>)}\r\n        </div>\r\n    );\r\n};","import * as React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport '../styles/SingleGrail.scss';\r\nimport {GrailSubmenu} from \"./GrailSubmenu\";\r\n\r\n\r\nconst GalleryImage = ({id, image}) => {\r\n    return (\r\n        <img src={`images/grail-${id}/${image}`} className=\"gallery-image\" alt=\"thumbnail\"/>\r\n    );\r\n};\r\n\r\nexport const SingleGrail = ({grails, match}) => {\r\n    const id = match.params.id;\r\n    const grail = grails.find(g => g.id == id);\r\n    if (grail) {\r\n        return (\r\n            <div className=\"single-grail-container\">\r\n                <GrailSubmenu grails={grails}/>\r\n                <div class=\"single-grail\">\r\n                    <h2 className=\"header\">{grail.name}</h2>\r\n                    {grail.images.map(image => {\r\n                        return (<GalleryImage id={grail.id} image={image}/>)\r\n                    })}\r\n                    <p className=\"description\">{grail.description}</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <div>Error</div>\r\n    }\r\n};","import * as React from \"react\";\r\nimport {getGrailData} from \"../actions/GrailActions\";\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {GrailGallery} from \"../components/GrailGallery\";\r\nimport {PropRoute} from \"../components/PropRoute\";\r\nimport {SingleGrail} from \"../components/SingleGrail\";\r\n\r\nexport class GrailsPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            grails: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        getGrailData()\r\n            .then(data => {\r\n                this.setState({grails: data});\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {match} = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <HashRouter>\r\n                    <PropRoute exact path={match.path} component={GrailGallery} grails={this.state.grails}/>\r\n                    <PropRoute path={`${match.path}/:id`} component={SingleGrail} grails={this.state.grails}/>\r\n                </HashRouter>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport function getGrailData() {\r\n    return axios.get('data/gallery.data.json')\r\n        .then(response => {\r\n            return response.data;\r\n        });\r\n}","import * as React from \"react\";\r\nimport {BrowserRouter as Router, Link} from \"react-router-dom\";\r\nimport '../styles/NavBar.scss';\r\n\r\nexport class NavBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar-container\">\r\n                <h1 className=\"header\">Grails of Dionysus</h1>\r\n                <div className=\"links\">\r\n                    <Link className=\"link\" to=\"/\">Home</Link>\r\n                    <Link className=\"link\" to=\"/grails\">Grails</Link>\r\n                    <Link className=\"link\" to=\"/about\">About</Link>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './styles/App.scss';\nimport {BrowserRouter as Router, Route, Link, HashRouter} from \"react-router-dom\";\nimport {HomePage} from \"./pages/HomePage\";\nimport {AboutPage} from \"./pages/AboutPage\";\nimport {GrailsPage} from \"./pages/GrailsPage\";\nimport {NavBar} from \"./components/NavBar\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <NavBar/>\n                <div className=\"page-container\">\n                    <Route path=\"/\" exact component={HomePage}/>\n                    <Route path=\"/about\" component={AboutPage}/>\n                    <Route path=\"/grails\" component={GrailsPage}/>\n                </div>\n            </HashRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}